#!/bin/fish

#### HELPERS ####

# Variables
set home_path $HOME
set config_path $HOME/.config

set fish_config_path $HOME/.config/fish/config.fish
set fish_var_file $HOME/.config/fish/env_vars.fish

set dots_version "2.0.0"
set dots_repo "https://github.com/Mdsp9070/dotfiles"

# Colors Functions

function green
    set_color green
    echo -ne $argv
    set_color normal
end

function normal
    set_color normal
    echo -ne $argv
    set_color normal
end


function yellow
    set_color yellow
    echo -ne $argv
    set_color normal
end

function red
    set_color red
    echo -ne $argv
    set_color normal
end

function magenta
    set_color magenta
    echo -ne $argv
    set_color normal
end

function blue
    set_color blue
    echo -ne $argv
    set_color normal
end

# General Functions

function die --on-event command-failed
    exit 1
end

function prompt
    green $argv
    normal "> "
end

function info
    blue $argv
end

function failure
    red $argv
end

function warning
    yellow $argv
end

function success
    green $argv
end

function success_installed
    success "$argv installed sucessfully!"
end

function header
    info "\n$argv\n"
end

function exist
    stat $argv >/dev/null 2>&1
end

function is_installed
    pacman -Qi $argv >/dev/null 2>&1
end

function install_pkg
    if not is_installed $argv
        sudo aura -S $argv
    else
        success "$argv is already installed!"
    end
end

function install_aur
    if not is_installed $argv
        sudo aura -A $argv
    else
        success "$argv is already installed!"
    end
end

function skip_install
    info "Ok, skipping $argv installation...\n"
end

function skip_link
    info "Ok, skipping $argv link as it already exists...\n"
end

function yes_no
    header "Do you want to install $argv (y/n)"

    read answer

    switch $answer
        case y
            true
        case n
            skip_install $argv
            false
        case "*"
            yes_no $argv
    end
end

function arg_parse_error
    failure "I don't know what to do with these args...\n"
    failure "Execute -h/--help to see availabele commands!\n"
end

function help
    green "dotfiles "
    echo "v$dots_version"

    yellow "\nUSAGE:\n"
    echo -e "    dotfiles [options]\n"

    yellow "OPTIONS:\n"
    green "    -h, --help\n"
    echo -e "            Shows this help section!\n"
    green "    -l, --link\n"
    echo -e "            Given a dots directory, links all dots to they desired folders!\n"
    green "    -i, --install\n"
    echo -e "            Sets up a complete workstation! This option also links all dots!"

    yellow "\nMORE INFO:\n\n"
    normal "Please, refer to the repository README: "
    magenta "$dots_repo\n\n"

    red "Errors "
    normal "in a nutshell:\n"
    set_color -uoi cyan
    echo -ne "BEFORE RUNNING install OR link COMMANDS, YOU NEED TO "
    echo -ne "EXPORT A VARIABLE `DOTS_DIR` THAT'S POINT TO THE FOLDER "
    echo -ne "WHERE YOU CLONNED THE MATTHEW'S REPO!!!\n"
    set_color normal
end

#### SCRIPT ####

function config
    header "Welcome! Let's start setting up your system xD\n"
    header "It could take more than 10 minutes, be patient\n"

    header "Upgrading and installing base-devel group\n"
    sudo pacman -Syyu && sudo pacman -S base-devel

    if yes_no git
        header "Installing git"
        install git

        header "Let's set up git!"
        echo "What name do you want to use in GIT user.name?"
        echo "For example, mine will be \"Zoey de Souza Pessanha\""
        read git_config_user_name

        git config --global user.name $git_config_user_name
        git config --global user.email $git_config_user_email

        echo "Can I set Vim as your default GIT editor for you? (y/n)"
        read git_core_editor_to_vim

        if echo $git_core_editor_to_vim | grep -iq "^y"
            git config --global core.editor vim
        else
            echo "Okay, no problem. :) Let's move on!"
        end

        success_installed Git
    end

    if yes_no github
        header "Generating a SSH Key"
        echo "What email do you want to use in GIT user.email?"
        echo "For example, mine will be \"zoey.spessanha@zeetech.io\""
        read git_config_user_email

        ssh-keygen -t ed25519 -C $git_config_user_email
        eval (ssh-agent -c)
        set -Ux SSH_AUTH_SOCK $SSH_AUTH_SOCK
        set -Ux SSH_AGENT_PID $SSH_AGENT_PID
        set -Ux SSH_AUTH_SOCK $SSH_AUTH_SOCK

        echo "What's the name of your private key?"
        read ssh_key

        ssh-add $HOME/.ssh/$ssh_key

        header "Installing github CLI"
        install github-cli
        success_installed Github
        gh auth login
    end

    header "Installing aura package manager"
    if not is_installed aura-bin
        git clone https://aur.archlinux.org/aura-bin.git
        cd aura-bin && makepkg -si && cd .. && rm -rf aura-bin
        success_installed aura
    else
        success "Aura is already installed!"
    end

    if yes_no flameshot
        header "Installing flameshot"
        install flameshot
        success_installed flameshot
    end

    if yes_no zathura
        header "Installing zathura"
        set files_to_link zathura $files_to_link
        install zathura zathura-pdf-mupdf
        success_installed zathura
    end

    if yes_no mpv
        header "Installing mpv"
        install mpv
        success_installed mpv
    end

    if yes_no curl
        header "Installing cURL"
        install curl
        success_installed curl
    end

    if yes_no nnn
        header "Installing nnn"
        install nnn
        success_installed
    end

    if yes_no "microsoft edge"
        header "Installing microsoft-edge-dev"
        install_aur microsoft-edge-dev
        success_installed "microsoft edge"
    end

    if yes_no ncdu
        header "Installing ncdu"
        install ncdu
        success_installed ncdu
    end

    if yes_no neofetch
        header "Installing neofetch"
        install neofetch
        success_installed neofetch
    end

    if yes_no alacritty
        header "Installing alacritty"
        set files_to_link alacritty $files_to_link
        install alacritty
        success_installed alacritty
    end

    if yes_no xclip
        header "Installing tool to handle clipboard via CLI"
        install xclip
        success_installed xclip
    end

    if yes_no dunst
        header "Installing dunst"
        set files_to_link dunst $files_to_link
        install dunst
        success_installed dunst
    end

    if yes_no picom
        header "Installing picom"
        set files_to_link picom.conf $files_to_link
        install picom
        success_installed picom
    end

    if yes_no beekeeper
        header "Installing beekeeper studio"
        install_aur beekeeper-studio-bin
        success_installed beekeeper
    end

    if yes_no lazygit
        header "Installing lazygit"
        install_aur lazygit-bin
        success_installed lazygit
    end

    header "Instaling asdf"
    if not ls $HOME/.asdf/ >/dev/null 2>&1
        gh repo clone asdf-vm/asdf ~/.asdf >/dev/null 2>&1
        cd ~/.asdf
        git checkout (git describe --abbrev=0 --tags) >/dev/null 2>&1
        source ~/.asdf/asdf.fish
        mkdir -p ~/.config/fish/completions; and cp ~/.asdf/completions/asdf.fish ~/.config/fish/completions
        echo "source ~/.asdf/asdf.fish" >>$HOME/.config/fish/config.fish
        success_installed asdf
    else
        success " You already have asdf! Moving on..."
    end

    if yes_no erlang
        header "Installing erlang"
        if not erlc -help >/dev/null 2>&1
            header "Installing some erlang build dependencies..."
            sudo aura -S unixodbc libssh glu mesa wxgtk2 libpng ncurses

            asdf plugin-add erlang
            KERL_BUILD_DOCS=yes KERL_CONFIGURE_OPTIONS="--without-javac" asdf install erlang latest
            asdf globall erlang latest

            success_installed erlang
        else
            success "Oh, Ericsson thanks you!"
        end
    end

    if yes_no elixir
        header "Installing elixir"
        if not elixir -v >/dev/null 2>&1
            asdf plugin-add elixir
            asdf install elixir latest
            asdf globall elixir latest

            success_installed elixir
        else
            success "You're a alchemist already! Good!"
        end
        set files_to_link .iex.exs $files_to_link
    end

    if yes_no rust
        header "Installing rust"
        if not rustc -h >/dev/null 2>&1
            asdf plugin-add rust
            asdf install rust stable
            asdf globall rust stable

            echo "set PATH $HOME/.cargo/bin $PATH" >>$fish_var_file

            success_installed rust
        else
            success "Wow, you're a crustacean already!"
        end
    end

    if yes_no nodejs
        header "Installing stable version of node"
        asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
        bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-previous-release-team-keyring'
        asdf install nodejs 12.20.1
        asdf globall nodejs 12.20.1

        success_installed nodejs
    end

    if yes_no haskell
        header "Installing 'stable' version of haskell"
        asdf plugin-add haskell
        asdf install haskell 8.10.3
        asdf global haskell 8.10.3

        success_installed haskell
    end

    header "Updating asdf binaries..."
    asdf reshim

    if yes_no xmonad
        header "Instaling xmonad and linking it's binary"
        if not xmonad --help >/dev/null 2>&1
            stack install xmonad xmonad-contrib
            sudo ln -s $HOME/.asdf/installs/haskell/8.10.3/bin/xmonad /usr/bin/xmonad

            success_installed xmonad
        else
            success "xmonad already exists..."
        end
        set files_to_link .xmonad $files_to_link
    end

    if yes_no xmobar
        header "Installing xmobar and linking it's binary"
        if not xmobar --help >/dev/null 2>&1
            stack install xmonad
            sudo ln -s $HOME/.asdf/installs/haskell/8.10.3/bin/xmobar /usr/bin/xmobar
        else
            success "Yeah, you're already have xmobar!"
        end
        set files_to_link xmobar $files_to_link
    end

    if yes_no "google cloud sdk"
        header "Installing google cloud sdk"
        install_aur google-cloud-sdk
        gcloud init

        success_installed "google cloud sdk"
    end

    if yes_no phoenix
        header "Installing latest version of Phoenix"
        mix archive.install hex phx_new

        success_installed phoenix
    end

    if yes_no exa
        header "Installing exa"
        install exa

        success_installed exa
    end

    if yes_no glow
        header "Installing glow"
        install_aur glow-bin

        success_installed glow
    end

    if yes_no "git delta"
        header "Installing git-delta"
        install_aur git-delta-bin
        set files_to_link .gitconfig

        success_installed "git delta"
    end

    if yes_no procs
        header "Installing procs"
        install procs

        success_installed procs
    end

    if yes_no fd
        header "Installing fd"
        install fd

        success_installed fd
    end

    if yes_no "startship prompt"
        header "Installing startship prompt"
        if not startship -V >/dev/null 2>&1
            curl -fsSL https://starship.rs/install.sh | bash
            echo "starship init fish | source" >>$fish_config_path

            success_installed starship
        else
            success "starship already exists"
        end
        set files_to_link starship.toml $files_to_link
    end

    if yes_no yarn
        header "Installing yarn"
        install yarn
        echo "set PATH $HOME/.yarn/bin $PATH" >>$fish_var_file

        success_installed yarn
    end

    if yes_no typescript
        header "Installing typescript"
        yarn global add typescript ts-node ts-node-dev

        success_installed typescript
    end

    if yes_no "create react app"
        header "Installing create-react-app"
        yarn global add create-react-app

        success_installed "create react app"
    end

    if yes_no "firebase tools"
        header "Installing firebase tools"
        yarn global add firebase-tools

        success_installed "firebase tools"
    end

    if yes_no "eslint and prettier"
        header "Installing eslint and prettier"
        yarn global add eslint@latest prettier

        success_installed "eslint and prettier"
    end

    if yes_no docker
        header "Installing docker"
        install -S docker

        if not sudo systemctl start docker >/dev/null 2>&1
            warning "Not on systemd, please, enable docker service manually!"
        else
            sudo systemctl enable docker
        end

        header "Adding you to the docker group!"
        sudo groupadd docker >/dev/null
        sudo usermod -aG docker $USER

        warning "Log out and log in again to be able to run docker without sudo"
        success_installed docker
    end

    if yes_no insomnia
        header "Installing insomnia"
        install_aur insomnia-bin

        header "Cloning omni theme for insomnia"
        warning "Dont't forget to move to ~/.config/Insomnia/plugins/"
        gh repo clone Rocketseat/insomnia-omni ~/insomnia-omni >/dev/null 2>&1

        success_installed insomnia
    end

    if yes_no spotify
        header "Installing spotify"
        install_aur spotify

        success_installed spotify
    end

    if yes_no telegram
        header "Installing telegram"
        install telegram-desktop

        success_installed telegram-desktop
    end

    if yes_no qbitttorrent
        header "Installing qbittorent"
        install qbittorrent

        success_installed qbittorrent
    end

    if yes_no discord
        header "Installing discord"
        install discord

        success_installed discord
    end

    if set -q files_to_link
        info "These're dots that you recently installed and will be linked automatically:\n"
        warning "Note that these configs needs to be into the dots folder specified ($dots_dir)\n"

        yellow "[ "
        magenta (string join ", " $files_to_link)
        yellow " ]\n"
    end

    success "\nAll done! Enjoy now!\n"
end

function menu_option
    green "$argv[1]) "
    magenta "$argv[2]\n"
end

function menu
    header "Dots and configs available:"

    set dots_number (count $dots)

    set idxs (seq $dots_number)
    for opt in $idxs
        menu_option $opt (basename $dots[$opt])
    end
    menu_option "\n0" "Cancel\n"
end

function link_if_not_exist
    set -l base (basename $argv[1])

    if exist $argv[1]
        skip_link $base

    else
        ln -s $argv[1] $argv[2]/$base

        success "Linked $base!\n"

    end

end

function link_to_home
    link_if_not_exist $argv $home_path/$base
end

function link_to_config
    link_if_not_exist $argv $config_path
end

function link_to
    link_if_not_exist $argv[2] $argv[1]
end

function link
    if exist $DOTS_DIR
        success "You're already up-to-date with latest matthew's dots\n"
        git pull origin main -C $dots_tmp >/dev/null 2>&1
    else
        info "Getting latest matthew's dots from "
        magenta "$dots_repo...\n"
        gh repo clone $dots_repo $dots_tmp >/dev/null 2>&1
        success "You're up-to-date with latest matthew's dots!\n"
    end

    set -g dots (for n in $DOTS_DIR/* $DOTS_DIR/.*; printf '%s\n' (realpath -e $n); end)

    menu && info "Type all numbers that wou want to link separated by spaces!\n"
    read -p "prompt dots" options

    echo ""

    for opt in (string split " " $options)
        set -l current $dots[$opt]

        switch $opt
            case string match -r "^\..+" $current
                link_to_home $current

            case string match scripts $current
                link_to_home $current
                echo "set PATH $HOME/scripts" >>$fish_config_path

            case string match udev_rules $current
                for rule in $DOTS_DIR/udev_rules/*
                    set -l base (basename $rule)
                    set -l real (realpath -e $rule)

                    link_to "/etc/udev/rules/$base" $real
                end

            case "*"
                link_to_config $current
        end
    end

    success "\nAll linked! Congrats!\n"
end


function update

end

if argparse h/help i/install l/link u/update -- $argv
    true
else
    arg_parse_error
    die
end

if ! set -q DOTS_DIR && ! set -q _flag_help
    failure "`DOTS_DIR` was not provided!\n"
    failure "Please, export a variable called `DOTS_DIR`!\n"
    failure "See help section for more info\n"

    die
else if ! realpath -e $DOTS_DIR >/dev/null 2>&1
    failure "`DOTS_DIRS` path value appears to not exist...\n"

    die
end

if set -q _flag_help
    help
else if set -q _flag_install
    config
else if set -q _flag_link
    link
else if _flag_update
    update
else
    failure "No option provided!\n"
    failure "Please, see help section with -h/--help\n"
end
