#!/bin/fish

#### HELPERS ####

# Variables
set config_path $HOME/.config

set fish_config_path $HOME/.config/fish/config.fish
set fish_var_file $HOME/.config/fish/env_vars.fish

set programs_to_link ""

set dots_version "2.0.0"

# Colors Functions

function green
    set_color green
    echo -ne $argv
    set_color normal
end

function yellow
    set_color yellow
    echo -ne $argv
    set_color normal
end

function red
    set_color red
    echo -ne $argv
    set_color normal
end

function blue
    set_color blue
    echo -ne $argv
    set_color normal
end

# General Functions

function die --on-event command-failed
    exit
end

function info
    blue $argv
end

function failure
    red $argv
end

function warning
    yellow $argv
end

function success
    green $argv
end

function success_installed
    success "$argv installed sucessfully!"
end


function header
    info "\n$argv\n"
end

function is_installed
    pacman -Qi $argv >/dev/null 2>&1
end

function install_pkg
    if not is_installed $argv
        sudo aura -S $argv
    else
        success "$argv is already installed!"
    end
end

function install_aur
    if not is_installed $argv
        sudo aura -A $argv
    else
        success "$argv is already installed!"
    end
end

function skip
    info "Ok, skipping $argv installation...\n"
end

function yes_no
    header "Do you want to install $argv (y/n)"

    read answer

    switch $answer
        case y
            true
        case n
            skip $argv
            false
        case "*"
            yes_no $argv
    end
end

function default_error
    failure "I don't know what to do with these args...\n"
    failure "Execute -h/--help to see availabele commands!\n"
end

function help
    green "dotfiles "
    echo "v$dots_version"

    yellow "\nUSAGE:\n"
    echo -e "    dotfiles [options]\n"

    yellow "OPTIONS:\n"
    green "    -h, --help\n"
    echo -e "            Shows this help section\n"
    green "    -l, --link\n"
    echo -e "            Given a dots directory, links all dots to they desired folders!\n"
    green "    -i, --install\n"
    echo -e "            Init installation of all dots!"
end

#### SCRIPT ####

function config
    header "Welcome! Let's start setting up your system xD\n"
    header "It could take more than 10 minutes, be patient\n"

    header "Upgrading and installing base-devel group\n"
    sudo pacman -Syyu && sudo pacman -S base-devel

    if yes_no git
        header "Installing git"
        install git

        echo "What name do you want to use in GIT user.name?"
        echo "For example, mine will be \"Zoey de Souza Pessanha\""
        read git_config_user_name

        git config --global user.name $git_config_user_name
        git config --global user.email $git_config_user_email

        echo "Can I set Vim as your default GIT editor for you? (y/n)"
        read git_core_editor_to_vim

        if echo $git_core_editor_to_vim | grep -iq "^y"
            git config --global core.editor vim
        else
            echo "Okay, no problem. :) Let's move on!"
        end

        success_installed Git
    end

    if yes_no github
        header "Generating a SSH Key"
        echo "What email do you want to use in GIT user.email?"
        echo "For example, mine will be \"zoey.spessanha@zeetech.io\""
        read git_config_user_email

        ssh-keygen -t ed25519 -C $git_config_user_email
        eval (ssh-agent -c)
        set -Ux SSH_AUTH_SOCK $SSH_AUTH_SOCK
        set -Ux SSH_AGENT_PID $SSH_AGENT_PID
        set -Ux SSH_AUTH_SOCK $SSH_AUTH_SOCK

        echo "What's the name of your private key?"
        read ssh_key

        ssh-add $HOME/.ssh/$ssh_key

        header "Installing github CLI"
        install github-cli
        success_installed Github
        gh auth login
    end

    header "Installing aura package manager"
    if not is_installed aura-bin
        git clone https://aur.archlinux.org/aura-bin.git
        cd aura-bin && makepkg -si && cd .. && rm -rf aura-bin
    else
        success "Aura is already installed!"
    end

    if yes_no flameshot
        header "Installing flameshot"
        install flameshot
    end

    if yes_no zathura
        header "Installing zathura"
        install zathura zathura-pdf-mupdf
    end

    if yes_no mpv
        header "Installing mpv"
        install mpv
    end

    if yes_no curl
        header "Installing cURL"
        install curl
    end

    if yes_no nnn
        header "Installing nnn"
        install nnn
    end

    if yes_no microsoft-edge
        header "Installing microsoft-edge-dev"
        install_aur microsoft-edge-dev
    end

    if yes_no ncdu
        header "Installing ncdu"
        install ncdu
    end

    if yes_no neofetch
        header "Installing neofetch"
        install neofetch
    end

    if yes_no alacritty
        header "Installing alacritty"
        install alacritty
    end

    if yes_no xclip
        header "Installing tool to handle clipboard via CLI"
        install xclip
    end

    if yes_no dunst
        header "Installing dunst"
        install dunst
    end

    if yes_no picom
        header "Installing picom"
        install picom
    end

    if yes_no beekeeper
        header "Installing beekeeper studio"
        install_aur beekeeper-studio-bin
    end

    if yes_no lazygit
        header "Installing lazygit"
        install_aur lazygit-bin
    end

    header "Instaling asdf"
    if not ls $HOME/.asdf/ >/dev/null 2>&1
        gh clone asdf-vm/asdf ~/.asdf
        cd ~/.asdf
        git checkout (git describe --abbrev=0 --tags)
        source ~/.asdf/asdf.fish
        mkdir -p ~/.config/fish/completions; and cp ~/.asdf/completions/asdf.fish ~/.config/fish/completions
        echo "source ~/.asdf/asdf.fish" >>$HOME/.config/fish/config.fish
    else
        success " You already have asdf! Moving on..."
    end

    if yes_no erlang
        header "Installing erlang"
        if not erlc -help >/dev/null 2>&1
            header "Installing some erlang build dependencies..."
            sudo aura -S unixodbc libssh glu mesa wxgtk2 libpng ncurses

            asdf plugin-add erlang
            KERL_BUILD_DOCS=yes KERL_CONFIGURE_OPTIONS="--without-javac" asdf install erlang latest
            asdf globall erlang latest
        else
            success "Oh, Ericsson thanks you!"
        end
    end

    if yes_no elixir
        header "Installing elixir"
        if not elixir -v >/dev/null 2>&1
            asdf plugin-add elixir
            asdf install elixir latest
            asdf globall elixir latest
        else
            success "You're a alchemist already! Good!"
        end
    end

    if yes_no rust
        header "Installing rust"
        if not rustc -h >/dev/null 2>&1
            asdf plugin-add rust
            asdf install rust stable
            asdf globall rust stable

            echo "set PATH $HOME/.cargo/bin $PATH" >>$fish_var_file
        else
            success "Wow, you're a crustacean already!"
        end
    end

    if yes_no nodejs
        header "Installing stable version of node"
        asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
        bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-previous-release-team-keyring'
        asdf install nodejs 12.20.1
        asdf globall nodejs 12.20.1
    end

    if yes_no haskell
        header "Installing 'stable' version of haskell"
        asdf plugin-add haskell
        asdf install haskell 8.10.3
        asdf global haskell 8.10.3
    end

    header "Updating asdf binaries..."
    asdf reshim

    if yes_no xmonad
        header "Instaling xmonad"
        if not xmonad --help >/dev/null 2>&1
            stack install xmonad xmonad-contrib
            sudo ln -s $HOME/.asdf/installs/haskell/8.10.3/bin/xmonad /usr/bin/xmonad
        else
            success "xmonad already exists..."
        end
    end

    if yes_no xmobar
        header "Installing xmobar"
        if not xmobar --help >/dev/null 2>&1
            stack install xmonad
            sudo ln -s $HOME/.asdf/installs/haskell/8.10.3/bin/xmobar /usr/bin/xmobar
        else
            success "Yeah, you're already have xmobar!"
        end
    end

    if yes_no "google cloud"
        header "Installing google cloud sdk"
        install_aur google-cloud-sdk
        gcloud init
    end

    if yes_no phoenix
        header "Installing latest version of Phoenix"
        mix archive.install hex phx_new
    end

    if yes_no exa
        header "Installing exa"
        install exa
    end

    if yes_no glow
        header "Installing glow"
        install_aur glow-bin
    end

    if yes_no "git delta"
        header "Installing git-delta"
        install_aur git-delta-bin
    end

    if yes_no procs
        header "Installing procs"
        install procs
    end

    if yes_no fd
        header "Installing fd"
        install fd
    end

    if yes_no "startship prompt"
        header "Installing startship prompt"
        if not startship -V >/dev/null 2>&1
            curl -fsSL https://starship.rs/install.sh | bash
            echo "starship init fish | source" >>$fish_config_path
        else
            success "starship already exists"
        end
    end

    if yes_no yarn
        header "Installing yarn"
        install yarn
        echo "set PATH $HOME/.yarn/bin $PATH" >>$fish_var_file
    end

    if yes_no typescript
        header "Installing typescript"
        yarn global add typescript ts-node ts-node-dev
    end

    if yes_no create-react-app
        header "Installing create-react-app"
        yarn global add create-react-app
    end

    if yes_no firebase-tools
        header "Installing firebase tools"
        yarn global add firebase-tools
    end

    if yes_no "eslint and prettier"
        header "Installing eslint and prettier"
        yarn global add eslint@latest prettier
    end

    if yes_no docker
        header "Installing docker"
        install -S docker

        if not sudo systemctl start docker >/dev/null 2>&1
            warning "Not on systemd, please, enable docker service manually!"
        else
            sudo systemctl enable docker
        end

        header "Adding you to the docker group!"
        sudo groupadd docker >/dev/null
        sudo usermod -aG docker $USER

        warning "Log out and log in again to be able to run docker without sudo"
    end

    if yes_no insomnia
        header "Installing insomnia"
        install_aur insomnia-bin

        header "Cloning omni theme for insomnia"
        warning "Dont't forget to move to ~/.config/Insomnia/plugins/"
        gh repo clone Rocketseat/insomnia-omni ~/insomnia-omni
    end

    if yes_no spotify
        header "Installing spotify"
        install_aur spotify
    end

    if yes_no telegram
        header "Installing telegram"
        install telegram-desktop
    end

    if yes_no qbitttorrent
        header "Installing qbittorent"
        install qbittorrent
    end

    if yes_no discord
        header "Installing discord"
        install discord
    end

    header "Let's set up git!"

    success "\nAll done! Enjoy now!\n"
end

if argparse h/help i/install "l/link=" -- $argv
    true
else
    default_error
end

set flags $_flag_help $_flag_install $_flag_link

if set -q _flag_help
    help
else if set -q _flag_install
    config
else if set -q _flag_link
    link
end
